print("Original model:")

var data = [{k: 5},
            {k: 16},
            {k: 17},
           ]

var simpleModel = function() {
  
  var m = uniform(4,18);
   
  map(function(d){observe(Gaussian({mu: m, sigma: 1}),d.k)},data);
  
  var Prior = uniform(4,18);
  
  var PredictivePosterior = gaussian(m,1);
  
  return {
          Prior: Prior, 
          Posterior: m,
          PosteriorPredictive: PredictivePosterior
   

      };
}

var opts = {method: 'SMC', particles: 2000, rejuvSteps: 5}

var output_1 = Infer(opts, simpleModel)

viz.marginals(output_1)

print('¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨')
print("Model 2")
print('Updated data:') //Hybrid model based on uniform and gaussian 


var data = [{k: 28},
            {k: 31},
            {k: 44},
            {k: 29},
           ]

var simpleModel = function() {
  
  var m = uniform(27,45);
   
  map(function(d){observe(Gaussian({mu: m, sigma: 1}),d.k)},data);
  
  var Prior = uniform(27,45);
   
  var PredictivePosterior = gaussian(32,10);
  
  return {
          Prior: Prior, 
          Posterior: m,
          PosteriorPredictive: PredictivePosterior
   

      };
}

var opts = {method: 'SMC', particles: 2000, rejuvSteps: 5}

var output_1 = Infer(opts, simpleModel)

viz.marginals(output_1)

print('¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨')
print("Model 3")
print('Validation check by Gaussian:') //Compare Posterior & PredictivePosterior with Model 2

var weights = [28, 31, 44, 29];

var simpleModel = function() {

  var m = gaussian(32, 10);
  
  map(function(weight) { observe(Gaussian({mu: m, sigma: 1}), weight); }, weights);
  
  var PredictivePosterior = gaussian(m, 1);
  
  return {
          Prior: gaussian(32, 10),
          Posterior: m,
          PosteriorPredictive: PredictivePosterior
      };
}

var opts = {method: 'SMC', particles: 2000, rejuvSteps: 5}

var output = Infer(opts, simpleModel)

viz.marginals(output)